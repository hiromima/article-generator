name: Gemini CLI - AI Code Assistant

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  # PR Review
  review-pr:
    name: üîç Review Pull Request
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Review PR with Gemini
        uses: google-github-actions/run-gemini-cli@v1
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          command: |
            Review this pull request for:
            - Code quality and best practices
            - TypeScript strict mode compliance
            - Potential bugs or security issues
            - Performance considerations
            - Test coverage

            Provide a detailed review with specific line comments if issues are found.

  # Issue Triage
  triage-issue:
    name: üè∑Ô∏è Triage Issue
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Analyze Issue with Gemini
        uses: google-github-actions/run-gemini-cli@v1
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          command: |
            Analyze this issue and suggest:
            - Appropriate labels (type, priority, complexity, effort)
            - Task breakdown if it's a large feature
            - Dependencies and prerequisites
            - Acceptance criteria

            Based on the Miyabi Framework label system:
            - type: bug, feature, refactor, docs, test, chore, security
            - priority: P0-Critical, P1-High, P2-Medium, P3-Low
            - complexity: small, medium, large, xlarge
            - effort: 1h, 4h, 1d, 3d, 1w, 2w

  # On-demand Assistance
  assist-on-demand:
    name: ü§ñ AI Assistant
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' &&
      contains(github.event.comment.body, '@gemini-cli')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Respond with Gemini
        uses: google-github-actions/run-gemini-cli@v1
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          # Gemini will automatically respond to @gemini-cli mentions

  # Code Generation (for labeled issues)
  generate-code:
    name: üíª Generate Code
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issues' &&
      contains(join(github.event.issue.labels.*.name, ','), 'agent:codegen')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate Code with Gemini
        uses: google-github-actions/run-gemini-cli@v1
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          command: |
            Based on this issue, generate the required code:
            - Follow TypeScript strict mode
            - Include comprehensive JSDoc comments
            - Add unit tests
            - Follow the existing project structure in src/agents/

            Create a new branch and commit the changes.

      - name: Run TypeScript check
        run: |
          npm ci
          npm run typecheck
        continue-on-error: true

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            feat: Generated code for Issue #${{ github.event.issue.number }}

            ü§ñ Generated with Gemini AI
          branch: gemini/issue-${{ github.event.issue.number }}
          title: 'feat: Generated code for #${{ github.event.issue.number }}'
          body: |
            ## ü§ñ Gemini AI Code Generation

            **Issue**: #${{ github.event.issue.number }}

            This PR contains code generated by Gemini AI based on the issue requirements.

            ### Generated Files

            See commit for details.

            ### Quality Checks

            - TypeScript strict mode: See workflow logs
            - Manual review required before merge

            ---
            ü§ñ Generated by Gemini CLI GitHub Actions
          draft: true
          labels: |
            ü§ñ agent:codegen
            ‚ú® type:feature
            üì• state:reviewing

#!/bin/bash
# Generate Self-Healing Agent dashboard
# Usage: generate-dashboard.sh [days]
# Outputs: Dashboard markdown to stdout

set -euo pipefail

DAYS="${1:-30}"

echo "# 🔧 Self-Healing Agent Dashboard"
echo ""
echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
echo "Period: Last ${DAYS} days"
echo ""

# Check if gh is available
if ! command -v gh &> /dev/null; then
    echo "::error::gh CLI not found"
    exit 1
fi

# Get all Self-Healing issues
ISSUES=$(gh issue list \
    --search "Self-Healing in:title" \
    --state all \
    --limit 1000 \
    --json number,title,state,createdAt,closedAt,labels \
    2>/dev/null || echo "[]")

if [ "$ISSUES" = "[]" ]; then
    echo "No Self-Healing issues found."
    exit 0
fi

# Calculate metrics
TOTAL_ISSUES=$(echo "$ISSUES" | jq 'length')
CLOSED_ISSUES=$(echo "$ISSUES" | jq '[.[] | select(.state == "CLOSED")] | length')
OPEN_ISSUES=$(echo "$ISSUES" | jq '[.[] | select(.state == "OPEN")] | length')

# Calculate success rate
if [ "$TOTAL_ISSUES" -gt 0 ]; then
    SUCCESS_RATE=$((CLOSED_ISSUES * 100 / TOTAL_ISSUES))
else
    SUCCESS_RATE=0
fi

echo "## 📈 Summary Statistics"
echo ""
echo "| Metric | Value |"
echo "|--------|-------|"
echo "| Total Repairs | ${TOTAL_ISSUES} |"
echo "| Successful | ${CLOSED_ISSUES} (${SUCCESS_RATE}%) |"
echo "| Failed/Pending | ${OPEN_ISSUES} |"
echo ""

# Recent repairs
echo "## 🕐 Recent Repairs"
echo ""

RECENT_ISSUES=$(echo "$ISSUES" | jq -r '
    sort_by(.createdAt) | reverse | .[0:10] |
    .[] |
    [
        .number,
        .title,
        .state,
        .createdAt
    ] | @tsv
')

if [ -n "$RECENT_ISSUES" ]; then
    echo "| # | Title | Status | Date |"
    echo "|---|-------|--------|------|"
    while IFS=$'\t' read -r num title state date; do
        if [ "$state" = "CLOSED" ]; then
            STATUS="✅ Closed"
        else
            STATUS="⚠️ Open"
        fi
        FORMATTED_DATE=$(date -d "$date" '+%Y-%m-%d %H:%M' 2>/dev/null || echo "$date")
        echo "| #${num} | ${title} | ${STATUS} | ${FORMATTED_DATE} |"
    done <<< "$RECENT_ISSUES"
else
    echo "No recent repairs found."
fi
echo ""

# Workflow breakdown
echo "## 🔍 Workflow Breakdown"
echo ""

WORKFLOW_STATS=$(echo "$ISSUES" | jq -r '
    group_by(.title | split(": ")[1] // "Unknown") |
    map({
        workflow: .[0].title | split(": ")[1] // "Unknown",
        count: length
    }) |
    sort_by(.count) | reverse |
    .[] | [.workflow, .count] | @tsv
')

if [ -n "$WORKFLOW_STATS" ]; then
    echo "| Workflow | Failures |"
    echo "|----------|----------|"
    while IFS=$'\t' read -r workflow count; do
        echo "| ${workflow} | ${count} |"
    done <<< "$WORKFLOW_STATS"
else
    echo "No workflow data available."
fi
echo ""

# Trends
echo "## 📊 Trends"
echo ""
echo "Success Rate: ${SUCCESS_RATE}%"
echo ""
if [ "$SUCCESS_RATE" -ge 80 ]; then
    echo "✅ **Excellent** - Self-Healing Agent is performing well"
elif [ "$SUCCESS_RATE" -ge 60 ]; then
    echo "⚠️ **Good** - Some improvements possible"
else
    echo "❌ **Needs Attention** - High failure rate detected"
fi
echo ""

# Recommendations
echo "## 💡 Recommendations"
echo ""
if [ "$SUCCESS_RATE" -lt 80 ]; then
    echo "- Review failed repairs for common patterns"
    echo "- Consider improving Gemini prompt"
    echo "- Add more Few-Shot examples"
fi
if [ "$OPEN_ISSUES" -gt 5 ]; then
    echo "- Address pending issues"
    echo "- Investigate why repairs are not completing"
fi
echo ""

echo "---"
echo ""
echo "🤖 Generated by Self-Healing Agent"
